FROM node:18-alpine AS base

# Development Environment
ARG NODE_ENV
ENV NODE_ENV=${NODE_ENV:?error}

# Database Configuration
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL:?error}

# Better Auth
ARG NEXT_PUBLIC_BETTER_AUTH_URL
ARG BETTER_AUTH_SECRET
ARG BETTER_AUTH_EMAIL
ARG RESEND_API_KEY
ENV NEXT_PUBLIC_BETTER_AUTH_URL=${NEXT_PUBLIC_BETTER_AUTH_URL:?error}
ENV BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET:?error}
ENV BETTER_AUTH_EMAIL=${BETTER_AUTH_EMAIL:?error}
ENV RESEND_API_KEY=${RESEND_API_KEY:?error}

# This Dockerfile is copy-pasted into our main docs at /docs/handbook/deploying-with-docker.
# Make sure you update both files!

FROM base AS builder
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk update
RUN apk add --no-cache libc6-compat
# Set working directory
WORKDIR /app
RUN npm install -g turbo
COPY . .
RUN turbo prune api --docker

# Add lockfile and package.json's of isolated subworkspace
FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app

# First install the dependencies (as they change less often)
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
RUN corepack enable
RUN pnpm install --frozen-lockfile

# Build the project
COPY --from=builder /app/out/full/ .
RUN pnpm dlx turbo run build --filter=api

# Uncomment and use build args to enable remote caching
# ARG TURBO_TEAM
# ENV TURBO_TEAM=$TURBO_TEAM

# ARG TURBO_TOKEN
# ENV TURBO_TOKEN=$TURBO_TOKEN

FROM base AS runner
WORKDIR /app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 expressjs
USER expressjs
COPY --from=installer /app .

CMD node apps/api/dist/index.js
